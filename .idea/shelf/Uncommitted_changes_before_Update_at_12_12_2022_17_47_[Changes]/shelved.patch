Index: homework-vue/src/components/SignupCompo.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><template>\r\n  <div class=\"container\">\r\n    <div class=\"item\">\r\n      <h2 class=\"textformating2\">Welcome to PostIt!</h2>\r\n      <h2 class=\"textformating2\">Please sign up</h2>\r\n      <br>\r\n      <form @submit.stop.prevent=\"signUp\">\r\n        <h2 class=\"textformating2\">Username</h2>\r\n        <input id=username placeholder=\"Username\" v-model=\"username\">\r\n        <h2 class=\"textformating2\">Email</h2>\r\n        <input id=email type=\"email\" placeholder=\"Email\" v-model=\"email\">\r\n        <br>\r\n        <h2 class=\"textformating2\">Password</h2>\r\n        <input v-model=\"password.password\" id=\"password\" type=\"password\" placeholder=\"Password\">\r\n        <br>\r\n        <input v-model=\"password.confirm\" id=\"confirm\" type=\"password\" placeholder=\"Confirm password\">\r\n        <div v-if=\"validationError\" class=\"error\">\r\n          <pre class=\"error\">{{validationError}}</pre>\r\n        </div>\r\n        <input id=\"buttonInput\" type=\"submit\"/>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n\r\n<script>\r\n//import { required, minLength, maxLength} from 'vuelidate/lib/validators';\r\nimport useValidate from '@vuelidate/core'\r\nimport {required, email, minLength, maxLength, sameAs} from '@vuelidate/validators'\r\n\r\nexport default {\r\n\r\n  data() {\r\n    return {\r\n      v$: useValidate(),\r\n      username: \"\",\r\n      email: \"\",\r\n      password: {\r\n        password: \"\",\r\n        confirm: \"\",\r\n      },\r\n      validationError: \"\",\r\n    }\r\n  },\r\n  methods: {\r\n    signUp() {\r\n\r\n      this.v$.$validate();\r\n      if (!this.v$.$error) {\r\n        var data = {\r\n          name: this.username,\r\n          email: this.email,\r\n          password: this.password.password\r\n        }\r\n        fetch(\"http://localhost:3000/auth/signup\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          credentials: 'include',\r\n          body: JSON.stringify(data)\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n              this.$store.dispatch(\"setUserAction\", data.user_id)\r\n              location.assign(\"/\");\r\n            })\r\n            .catch((e) => {\r\n              this.validationError = \"Email is already in use.\";\r\n              console.log(e);\r\n            })\r\n      } else {\r\n        this.validationError = \"\";\r\n        for (let error of  this.v$.$errors) {\r\n          if (error.$validator===\"sameAs\") this.validationError += \"Passwords must be same!\\n\"\r\n          if (error.$validator===\"minLength\") this.validationError += \"Password must be at least 8 characters!\\n\"\r\n          if (error.$validator===\"maxLength\") this.validationError += \"Password must be at most 15 characters!\\n\"\r\n          if (error.$validator===\"valid\") this.validationError += \"Password must contain the following:\\n\" +\r\n              \"\\t2 lowercase\\n\\tsymbol '_'\\n\\t1 number\\n\\tstart with uppercase letter\\n\"\r\n        }\r\n\r\n      }\r\n    },\r\n  },\r\n  validations() {\r\n    return {\r\n      username: {required},\r\n      email: {required, email},\r\n      password: {\r\n        password: {\r\n          required,\r\n          minLength: minLength(8),\r\n          maxLength: maxLength(15),\r\n          valid: function (value) {\r\n            const containsUpper = /[A-Z]/.test(value);\r\n            const contains2Lower = /[a-z].*[a-z]/.test(value);\r\n            const containsNumber = /[0-9]/.test(value);\r\n            const containsSpecial = /_/.test(value);\r\n            const startsWithUpper = /[A-Z]/.test(value.substring(0, 1));\r\n            return (containsSpecial && startsWithUpper && containsUpper\r\n                && containsNumber && contains2Lower);\r\n          },\r\n        },\r\n        confirm: {required, sameAs: sameAs(this.password.password)},\r\n      },\r\n      validationError: {}\r\n    }\r\n  }\r\n}\r\n//   validations: {\r\n//       user: {\r\n//         password: {\r\n//           required: required,\r\n//           valid: function (value) {\r\n//             const contains2Upper = /[A-Z].*[A-Z]/.test(value);\r\n//             const containsLower =  /[a-z]/.test(value);\r\n//             const containsNumber = /[0-9]/.test(value);\r\n//             const containsSpecial = /[_]/.test(value);\r\n//             const startsWithUpper = /[A-Z]/.test(value.substring(0, 1));\r\n//             return (containsSpecial && startsWithUpper && contains2Upper\r\n//                 && containsNumber && containsLower);\r\n//           },\r\n//           minLength: minLength(8),\r\n//           maxLength: maxLength(15),\r\n//         }\r\n//       }\r\n//     },\r\n//   computed: {\r\n//     isDisabled() {\r\n//       return this.$v.$invalid;\r\n//     }\r\n//   },\r\n//   created() {\r\n//     this.submitted = true;\r\n//     return this.$v.$touch();\r\n//   }\r\n//\r\n// }\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n.error {\r\n  margin: 1em 0 1em 0;\r\n  width: 15em;\r\n  color: red;\r\n  font-weight: bold;\r\n  font-size: smaller;\r\n  font-family: inherit;\r\n  text-align:left;\r\n}\r\n.container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n}\r\n\r\n.item {\r\n  order: inherit;\r\n  background-color: #ffd2fc;\r\n  margin: 4em;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 1em;\r\n  border-radius: 20px;\r\n}\r\n\r\n#buttonInput {\r\n  width:50%;\r\n}\r\n.textformating1 {\r\n  color: #1ccad8;\r\n  font-size: 1em;\r\n  text-align: center;\r\n\r\n}\r\n\r\n.textformating2 {\r\n  font-size: 1em;\r\n  text-align: center;\r\n}\r\n\r\n\r\n</style>\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-vue/src/components/SignupCompo.vue b/homework-vue/src/components/SignupCompo.vue
--- a/homework-vue/src/components/SignupCompo.vue	(revision 1b6666f8cdc5d8991b55d6426bea45078cecbaba)
+++ b/homework-vue/src/components/SignupCompo.vue	(date 1670527882972)
@@ -109,35 +109,7 @@
     }
   }
 }
-//   validations: {
-//       user: {
-//         password: {
-//           required: required,
-//           valid: function (value) {
-//             const contains2Upper = /[A-Z].*[A-Z]/.test(value);
-//             const containsLower =  /[a-z]/.test(value);
-//             const containsNumber = /[0-9]/.test(value);
-//             const containsSpecial = /[_]/.test(value);
-//             const startsWithUpper = /[A-Z]/.test(value.substring(0, 1));
-//             return (containsSpecial && startsWithUpper && contains2Upper
-//                 && containsNumber && containsLower);
-//           },
-//           minLength: minLength(8),
-//           maxLength: maxLength(15),
-//         }
-//       }
-//     },
-//   computed: {
-//     isDisabled() {
-//       return this.$v.$invalid;
-//     }
-//   },
-//   created() {
-//     this.submitted = true;
-//     return this.$v.$touch();
-//   }
-//
-// }
+
 </script>
 
 
Index: homework-node/database.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const Pool = require('pg').Pool;\r\nconst pool = new Pool({\r\n    user: \"postgres\",\r\n    password: \"postgres\",\r\n    database: \"testwad\",\r\n    host: \"localhost\",\r\n    port: \"5432\"\r\n});\r\n\r\nconst execute = async(query) => {\r\n    try {\r\n        await pool.connect(); // gets connection\r\n        await pool.query(query); // sends queries\r\n        return true;\r\n    } catch (error) {\r\n        console.error(error.stack);\r\n        return false;\r\n    }\r\n}\r\n\r\nconst createPostTblQuery = `\r\n    CREATE TABLE IF NOT EXISTS \"posts\" (\r\n\t    \"id\" SERIAL PRIMARY KEY,         \r\n\t    \"date\" DATE NOT NULL DEFAULT CURRENT_DATE,\r\n\t    \"body\" VARCHAR(200) NOT NULL,\r\n        \"userid\" SERIAL NOT NULL\r\n    );`;\r\n\r\nconst createUserTblQuery = `\r\n    CREATE TABLE IF NOT EXISTS \"users\" (\r\n\t    \"id\" SERIAL PRIMARY KEY,         \r\n\t    \"name\" VARCHAR(200) NOT NULL,\r\n\t    \"password\" VARCHAR(200) NOT NULL,\r\n        \"email\" VARCHAR(200)  NOT NULL UNIQUE\r\n    );`;\r\n// A function to execute the previous query\r\nexecute(createPostTblQuery).then(result => {\r\n    if (result) {\r\n        console.log('created the \"posts\" table');\r\n    }\r\n\r\n});\r\n\r\n// A function to execute the previous query\r\nexecute(createUserTblQuery).then(result => {\r\n    if (result) {\r\n        console.log('created the \"users\" table');\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = pool;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-node/database.js b/homework-node/database.js
--- a/homework-node/database.js	(revision 1b6666f8cdc5d8991b55d6426bea45078cecbaba)
+++ b/homework-node/database.js	(date 1670527882925)
@@ -1,7 +1,7 @@
 const Pool = require('pg').Pool;
 const pool = new Pool({
     user: "postgres",
-    password: "postgres",
+    password: "UmmiTiiger20",
     database: "testwad",
     host: "localhost",
     port: "5432"
@@ -21,9 +21,9 @@
 const createPostTblQuery = `
     CREATE TABLE IF NOT EXISTS "posts" (
 	    "id" SERIAL PRIMARY KEY,         
-	    "date" DATE NOT NULL DEFAULT CURRENT_DATE,
+	    "title" VARCHAR(200) NOT NULL,
 	    "body" VARCHAR(200) NOT NULL,
-        "userid" SERIAL NOT NULL
+        "urllink" VARCHAR(200)  
     );`;
 
 const createUserTblQuery = `
@@ -31,7 +31,7 @@
 	    "id" SERIAL PRIMARY KEY,         
 	    "name" VARCHAR(200) NOT NULL,
 	    "password" VARCHAR(200) NOT NULL,
-        "email" VARCHAR(200)  NOT NULL UNIQUE
+        "email" VARCHAR(200) UNIQUE NOT NULL
     );`;
 // A function to execute the previous query
 execute(createPostTblQuery).then(result => {
Index: homework-node/server.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst pool = require('./database');\r\nconst cors = require('cors')\r\nconst port = process.env.PORT || 3000;\r\nconst bcrypt = require('bcrypt');\r\nconst cookieParser = require('cookie-parser');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst app = express();\r\n\r\n\r\napp.use(cors({ origin: 'http://localhost:8080', credentials: true }));\r\napp.use(express.json());\r\n\r\napp.use(cookieParser());\r\n\r\nconst secret = \"gdgdhdbcb770785rgdzqws\"; // use a stronger secret\r\nconst maxAge = 60 * 60; //unlike cookies, the expiresIn in jwt token is calculated by seconds not milliseconds\r\n\r\nconst generateJWT = (id) => {\r\n    return jwt.sign({ id }, secret, { expiresIn: maxAge })\r\n    //jwt.sign(payload, secret, [options, callback]), and it returns the JWT as string\r\n}\r\n// The express.json() function is a built-in middleware function in Express.\r\n\r\n\r\n// It parses incoming requests with JSON payloads and is based on body-parser.\r\n\r\n    //  Handling HTTP requests code will go here\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(\"Server is listening to port \" + port)\r\n});\r\n\r\napp.post('/api/posts', async(req, res) => {\r\n    try {\r\n        console.log(\"a post request has arrived to posts\");\r\n        const post = req.body;\r\n        console.log(post);\r\n        const newpost = await pool.query(\r\n            \"INSERT INTO posts(body, userid) values ($1, $2)    RETURNING*\", [post.body, post.userid]\r\n        );\r\n        res.json(newpost);\r\n    } catch (err) {\r\n        console.log(err.message)\r\n    }\r\n});\r\n//postituste saamine\r\n\r\n//kustuta postitused\r\napp.delete('/api/posts', async(req, res) => {\r\n    try {\r\n        console.log(\"delete request to delete users posts\");\r\n        const { userId } = req.params;\r\n        console.log(post);\r\n        const deletePosts = await pool.query(\r\n            \"DELETE FROM posts WHERE userId = $1\", [userId]\r\n        );\r\n        res.json(deletePosts);\r\n\r\n    } catch (err) {\r\n        console.log(err.message);\r\n    }\r\n})\r\n\r\n\r\n//muuda postitus\r\napp.update('/api/posts', async(req, res) => {\r\n    try {\r\n        console.log(\"update request to update users posts\");\r\n        const { userId } = req.params;\r\n        console.log(post);\r\n        const updatePosts = await pool.query(\r\n            \"UPDATE posts SET body = $2 WHERE id = $1\", [id, body]\r\n        );\r\n        res.json(updatePosts);\r\n\r\n    } catch (err) {\r\n        console.log(err.message);\r\n    }\r\n})\r\n\r\n//4\r\n//saa postitused\r\n\r\napp.get('/api/posts/', async (req, res) => {\r\n    try {\r\n        console.log(\"get posts request has arrived\");\r\n        const posts = await pool.query(\r\n            \"SELECT posts.id, users.name, posts.body, posts.date FROM posts JOIN users ON users.id = posts.userid\"\r\n        );\r\n        res.json(posts.rows);\r\n\r\n    } catch (err) {\r\n        console.log(err.message);\r\n    }\r\n})\r\n//saa kindel postitus\r\n\r\napp.get('/api/posts/:id', async(req, res) => {\r\n    try {\r\n        console.log(`get a post with route parameter request has arrived`);\r\n        const { id } = req.params;\r\n\r\n        const posts = await pool.query(\r\n            \"SELECT * FROM posttable WHERE id = $1\", [id]\r\n        );\r\n        res.json(posts.rows[0]);\r\n    } catch (err) {\r\n        console.error(err.message);\r\n    }\r\n});\r\n// Also \"credentials: 'include'\" need to be added in Fetch API in the Vue.js App\r\n\r\n\r\n// is used to check whether a user is authinticated\r\napp.get('/auth/authenticate', async(req, res) => {\r\n    console.log('authentication request has been arrived');\r\n    const token = req.cookies.jwt; // assign the token named jwt to the token const\r\n    //console.log(\"token \" + token);\r\n    let authenticated = false; // a user is not authenticated until proven the opposite\r\n    try {\r\n        if (token) { //checks if the token exists\r\n            //jwt.verify(token, secretOrPublicKey, [options, callback]) verify a token\r\n            await jwt.verify(token, secret, (err) => { //token exists, now we try to verify it\r\n                if (err) { // not verified, redirect to login page\r\n                    console.log(err.message);\r\n                    console.log('token is not verified');\r\n                    res.send({ \"authenticated\": authenticated }); // authenticated = false\r\n                } else { // token exists and it is verified\r\n                    console.log('author is authenticated');\r\n                    authenticated = true;\r\n                    res.send({ \"authenticated\": authenticated }); // authenticated = true\r\n                }\r\n            })\r\n        } else { //applies when the token does not exist\r\n            console.log('author is not authenticated');\r\n            res.send({ \"authenticated\": authenticated }); // authenticated = false\r\n        }\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(400).send(err.message);\r\n    }\r\n});\r\n\r\n// signup a user\r\napp.post('/auth/signup', async(req, res) => {\r\n    try {\r\n        console.log(\"a signup request has arrived\");\r\n        //console.log(req.body);\r\n        const {name, email, password } = req.body;\r\n\r\n        const salt = await bcrypt.genSalt(); //  generates the salt, i.e., a random string\r\n        const bcryptPassword = await bcrypt.hash(password, salt) // hash the password and the salt\r\n        const authUser = await pool.query( // insert the user and the hashed password into the database\r\n            \"INSERT INTO users(name, email, password) values ($1, $2, $3) RETURNING*\", [name, email, bcryptPassword]\r\n        );\r\n        console.log(authUser.rows[0].id);\r\n        const token = await generateJWT(authUser.rows[0].id); // generates a JWT by taking the user id as an input (payload)\r\n        //console.log(token);\r\n        //res.cookie(\"isAuthorized\", true, { maxAge: 1000 * 60, httpOnly: true });\r\n        //res.cookie('jwt', token, { maxAge: 6000000, httpOnly: true });\r\n        res\r\n            .status(201)\r\n            .cookie('jwt', token, { maxAge: 6000000, httpOnly: true })\r\n            .json({ user_id: authUser.rows[0].id })\r\n            .send;\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(400).json({ error: \"Email is already in use.\" });;\r\n    }\r\n});\r\n\r\napp.post('/auth/login', async(req, res) => {\r\n    try {\r\n        console.log(\"a login request has arrived\");\r\n        const { email, password } = req.body;\r\n        const user = await pool.query(\"SELECT * FROM users WHERE email = $1\", [email]);\r\n        if (user.rows.length === 0) return res.status(401).json({ error: \"User is not registered\" });\r\n\r\n        /*\r\n        To authenticate users, you will need to compare the password they provide with the one in the database.\r\n        bcrypt.compare() accepts the plain text password and the hash that you stored, along with a callback function.\r\n        That callback supplies an object containing any errors that occurred, and the overall result from the comparison.\r\n        If the password matches the hash, the result is true.\r\n        bcrypt.compare method takes the first argument as a plain text and the second argument as a hash password.\r\n        If both are equal then it returns true else returns false.\r\n        */\r\n\r\n        //Checking if the password is correct\r\n        const validPassword = await bcrypt.compare(password, user.rows[0].password);\r\n        //console.log(\"validPassword:\" + validPassword);\r\n        if (!validPassword) return res.status(401).json({ error: \"Incorrect password\" });\r\n\r\n        const token = await generateJWT(user.rows[0].id);\r\n        res\r\n            .status(201)\r\n            .cookie('jwt', token, { maxAge: 6000000, httpOnly: true })\r\n            .json({ user_id: user.rows[0].id })\r\n            .send;\r\n    } catch (error) {\r\n        res.status(401).json({ error: error.message });\r\n    }\r\n});\r\n\r\n//logout a user = deletes the jwt\r\napp.get('/auth/logout', (req, res) => {\r\n    console.log('delete jwt request arrived');\r\n    res.status(202).clearCookie('jwt').json({ \"Msg\": \"cookie cleared\" }).send\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-node/server.js b/homework-node/server.js
--- a/homework-node/server.js	(revision 1b6666f8cdc5d8991b55d6426bea45078cecbaba)
+++ b/homework-node/server.js	(date 1670859853189)
@@ -66,7 +66,7 @@
 
 
 //muuda postitus
-app.update('/api/posts', async(req, res) => {
+app.put('/api/posts', async(req, res) => {
     try {
         console.log("update request to update users posts");
         const { userId } = req.params;
Index: homework-vue/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># wad-homework\r\n\r\n## Project setup\r\n```\r\nnpm install\r\n```\r\n\r\n### Compiles and hot-reloads for development\r\n```\r\nnpm run serve\r\n```\r\n\r\n### Compiles and minifies for production\r\n```\r\nnpm run build\r\n```\r\n\r\n### Lints and fixes files\r\n```\r\nnpm run lint\r\n```\r\n\r\n### Customize configuration\r\nSee [Configuration Reference](https://cli.vuejs.org/config/).\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-vue/README.md b/homework-vue/README.md
--- a/homework-vue/README.md	(revision 1b6666f8cdc5d8991b55d6426bea45078cecbaba)
+++ b/homework-vue/README.md	(date 1670859650876)
@@ -1,4 +1,4 @@
-# wad-homework
+npm# wad-homework
 
 ## Project setup
 ```
Index: homework-vue/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework-vue/package-lock.json b/homework-vue/package-lock.json
--- a/homework-vue/package-lock.json	(revision 1b6666f8cdc5d8991b55d6426bea45078cecbaba)
+++ b/homework-vue/package-lock.json	(date 1670834957000)
@@ -4406,6 +4406,65 @@
         "yarn": ">=1"
       }
     },
+    "node_modules/cross-env/node_modules/cross-spawn": {
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
+      "dev": true,
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/cross-env/node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cross-env/node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cross-env/node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cross-env/node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
     "node_modules/cross-spawn": {
       "version": "7.0.3",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
@@ -14804,6 +14863,49 @@
       "dev": true,
       "requires": {
         "cross-spawn": "^7.0.1"
+      },
+      "dependencies": {
+        "cross-spawn": {
+          "version": "7.0.3",
+          "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+          "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
+          "dev": true,
+          "requires": {
+            "path-key": "^3.1.0",
+            "shebang-command": "^2.0.0",
+            "which": "^2.0.1"
+          }
+        },
+        "path-key": {
+          "version": "3.1.1",
+          "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+          "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+          "dev": true
+        },
+        "shebang-command": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+          "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+          "dev": true,
+          "requires": {
+            "shebang-regex": "^3.0.0"
+          }
+        },
+        "shebang-regex": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+          "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+          "dev": true
+        },
+        "which": {
+          "version": "2.0.2",
+          "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+          "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+          "dev": true,
+          "requires": {
+            "isexe": "^2.0.0"
+          }
+        }
       }
     },
     "cross-spawn": {
